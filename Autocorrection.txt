import regex
import time
from allplace import get_json_data

def province_fail(pro_matches,Data):
        province_set = set()
        province_set.add('กรุงเทพฯ')
        for i in pro_matches:
            for k in Data:
                for att,val in k.items():
                    if att=='province':
                        province_set.add(val)
        province_list = list(province_set)
        res = find_result(province_list,pro_matches)
        return res

def province_amphoe_fail(pro_amp_matches,Data):
        amphoe_set = set()
        for i in range(len(pro_amp_matches)):
            for j in range(len(pro_amp_matches[i])):
                if pro_amp_matches and j != len(pro_amp_matches[i])-1:
                    #print(pro_amp_matches[i][j])
                    for k in Data:
                        for att,val in k.items():
                            if att=='province' and val == pro_amp_matches[i][j]:
                                #print(val)
                                for att,val in k.items():
                                    if att=='amphoe':
                                        amphoe_set.add(val)

        #print(amphoe_set)
        amphoe_list = list(amphoe_set)
        res = find_result(amphoe_list,pro_amp_matches[0][1])
        return res

def province_tambon_fail(pro_tam_matches,Data):
        tambon_set = set()

        for i in range(len(pro_tam_matches)):
            for j in range(len(pro_tam_matches[i])):
                if pro_tam_matches and j != len(pro_tam_matches[i])-1:
                    for k in Data:
                        for att,val in k.items():
                            if att=='province' and val==pro_tam_matches[i][j]:
                                for att,val in k.items():
                                    if att=='district':
                                        tambon_set.add(val)

        tambon_list = list(tambon_set)
        res = find_result(tambon_list,pro_tam_matches[0][1])
        return res

def amphoe_tambon_fail(amp_tam_matches,Data):
        tambon_set = set()

        for i in range(len(amp_tam_matches)):
            for j in range(len(amp_tam_matches[i])):
                if amp_tam_matches and j != len(amp_tam_matches[i])-1:
                    for k in Data:
                        for att,val in k.items():
                            if att=='amphoe' and val==amp_tam_matches[i][j]:
                                for att,val in k.items():
                                    if att=='district':
                                        tambon_set.add(val)

        tambon_list = list(tambon_set)
        res = find_result(tambon_list,amp_tam_matches[0][1])
        return res

def province_amphoe_fail_tambon_fail(pro_amp_tam_matches,Data):
        amphoe_set = set()
        tambon_set = set()

        for i in range(len(pro_amp_tam_matches)):
            for j in range(len(pro_amp_tam_matches[i])):
                if pro_amp_tam_matches and j != len(pro_amp_tam_matches[i])-1:
                    for k in Data:
                        for att,val in k.items():
                            if att=='province' and val==pro_amp_tam_matches[i][0]:
                                for att,val in k.items():
                                    if att=='amphoe':
                                        amphoe_set.add(val)

                    for k in Data:
                        for att,val in k.items():
                            if att=='province' and val==pro_amp_tam_matches[i][0]:
                                for att,val in k.items():
                                    if att=='district':
                                        tambon_set.add(val)

        #print(amphoe_set)
        amphoe_list = list(amphoe_set)
        res1 = find_result(amphoe_list,pro_amp_tam_matches[0][1])
        #print(district_set)
        tambon_list = list(tambon_set)
        res2 = find_result(tambon_list,pro_amp_tam_matches[0][2])
        return res1,res2
        
def dict_action():
    with open('corpus/Action.txt','r',encoding='utf8') as read_file:
        dict = read_file.read()
        list_dict = dict.split('\n')
        return list_dict
    
def dict_place():
    with open('corpus/place.txt','r',encoding='utf8') as read_file:
        dict = read_file.read()
        list_dict = dict.split('\n')
        return list_dict
    
def Autocorrection(x):
        Data = get_json_data()
        
        ac_fail = r"<action_fail>([^<]*)</action_fail>"
        p_fail = r"<place_fail>([^<]*)</place_fail>"
        pro = r"<province_fail>([^<]*)</province_fail>"
        pro_amp = r"<province>([^<]*)</province>[^<]*<amphoe_fail>([^<]*)</amphoe_fail>(?!<tambon_fail>)"
        pro_tam = r"<province>([^<]*)</province>[^<]*<tambon_fail>([^<]*)</tambon_fail>"
        amp_tam = r"<amphoe>([^<]*)</amphoe>[^<]*<tambon_fail>([^<]*)</tambon_fail>"
        pro_amp_tam = r"<province>([^<]*)</province>[^<]*<amphoe_fail>([^<]*)</amphoe_fail>[^<]*<tambon_fail>([^<]*)</tambon_fail>"
        
        ac_fail_matches = regex.findall(ac_fail,x)
        p_fail_matches = regex.findall(p_fail,x)
        pro_matches = regex.findall(pro,x)
        pro_amp_matches = regex.findall(pro_amp,x)
        pro_tam_matches = regex.findall(pro_tam,x)
        amp_tam_matches = regex.findall(amp_tam,x)
        pro_amp_tam_matches = regex.findall(pro_amp_tam,x)
        
        if ac_fail_matches:
            for i in ac_fail_matches:
                res = find_result(dict_action(),i)
                correct_x = regex.sub(r'<action_fail>'+i+'</action_fail>', '<action>'+res+'</action>' , x)
                x = correct_x
        if p_fail_matches:
            for i in p_fail_matches:
                res = find_result(dict_place(),i)
                correct_x = regex.sub(r'<place_fail>'+i+'</place_fail>', '<place>'+res+'</place>' , x)
                x = correct_x
        
        if pro_matches:
            #province_fail(pro_matches,Data)
            for i in pro_matches:
                correct_x = regex.sub(r'<province_fail>'+i+'</province_fail>',r'<province>'+province_fail(i,Data)+'</province>', x)
                x = correct_x
                
        if pro_amp_matches :
            #province_amphoe_fail(pro_amp_matches,Data)
            for i in pro_amp_matches:
                correct_x = regex.sub(r'<province>'+i[0]+'</province>',r'<province>'+i[0]+'</province>', x)
                x = correct_x
                correct_x = regex.sub(r'<amphoe_fail>'+i[1]+'</amphoe_fail>', r'<amphoe>'+province_amphoe_fail(pro_amp_matches,Data)+'</amphoe>' , x)                      
                x = correct_x
            
        if pro_tam_matches :
            #province_district_fail(pro_dis_matches,Data)
            for i in pro_tam_matches:
                correct_x = regex.sub(r'<province>'+i[0]+'</province>', r'<province>'+i[0]+'</province>', x)
                x = correct_x
                correct_x = regex.sub(r'<tambon_fail>'+i[1]+'</tambon_fail>',r'<tambon>'+province_tambon_fail(pro_tam_matches,Data)+'</tambon>' , x)
                x = correct_x
        if amp_tam_matches :
            #amphoe_district_fail(amp_dis_matches,Data)
            for i in amp_tam_matches:
                correct_x = regex.sub(r'<amphoe>'+i[0]+'</amphoe>[^<]*<tambon_fail>'+i[1]+'</tambon_fail>', amphoe_tambon_fail(amp_tam_matches,Data), x)
                x = correct_x

        if pro_amp_tam_matches :
            #province_amphoe_fail_tambon_fail(pro_amp_tam_matches,Data)
            for i in pro_amp_tam_matches:
                correct_x = regex.sub(r'<province>'+i[0]+'</province>', r'<province>'+i[0]+'</province>', x)
                x = correct_x
                correct_x = regex.sub(r'<amphoe_fail>'+i[1]+'</amphoe_fail>', r'<amphoe>'+province_amphoe_fail_tambon_fail(pro_amp_tam_matches,Data)[0]+'</amphoe>' , x)                      
                x = correct_x
                correct_x = regex.sub(r'<tambon_fail>'+i[2]+'</tambon_fail>',r'<tambon>'+province_amphoe_fail_tambon_fail(pro_amp_tam_matches,Data)[1]+'</tambon>' , x)
                x = correct_x
                
        return x